name: Terraform Deployment

run-name: ${{ inputs.DEPLOY_MODE }} ${{ inputs.DEPLOY_APPLICATION }} on ${{ inputs.DEPLOY_ENVIRONMENT }}

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      DEPLOY_ENVIRONMENT:
        description: 'Select the environment.'
        required: true
        default: 'dev'
        options:
          - 'dev'
          - 'qa'
          - 'prod'
      DEPLOY_APPLICATION:
        description: 'Select the application.'
        required: true
        default: 'vpc'
        options:
          - 'vpc'
          - 'spec-search-indexer'
          - 'bastion'
      DEPLOY_MODE:
        description: 'Select the mode.'
        required: true
        default: 'apply'
        options:
          - 'plan'
          - 'apply'
          - 'destroy'

env:
  DEPLOY_ENVIRONMENT: ${{ env.DEPLOY_ENVIRONMENT }}
  DEPLOY_APPLICATION: ${{ env.DEPLOY_APPLICATION }}
  DEPLOY_MODE: ${{ env.DEPLOY_MODE }}

jobs:
  tfsec:
    name: tfsec
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo
        uses: actions/checkout@v3

      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: true

  terraform:
    name: '${{ inputs.DEPLOY_ENVIRONMENT }}/${{ inputs.DEPLOY_APPLICATION }}'
    runs-on: ubuntu-latest
    environment: ${{ inputs.input_environment }}

    defaults:
      run:
        shell: bash
        working-directory: ./${{ inputs.DEPLOY_ENVIRONMENT }}/${{ inputs.DEPLOY_APPLICATION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: |
          git config --global url."https://oauth2:${{ env.PLATFORM_DEVOPS_GITHUB_DEV_GITHUB_API_TOKEN }}@github.com".insteadOf https://github.com
          terraform init

      - name: Terraform Plan
        run: |
          terraform validate
          if [[ "${{ inputs.DEPLOY_MODE }}" == "destroy" ]]; then
            terraform plan -destroy -out "${{ inputs.DEPLOY_ENVIRONMENT }}.txt"
          else
            terraform plan -out "${{ inputs.DEPLOY_ENVIRONMENT }}.txt"
          fi

      - name: Terraform Apply
        if: inputs.DEPLOY_MODE != 'plan'
        run: |
          if [[ "${{ inputs.DEPLOY_MODE }}" == "destroy" ]]; then
            terraform destroy -input=false "${{ inputs.DEPLOY_ENVIRONMENT }}.txt"
          else
            terraform apply -input=false "${{ inputs.DEPLOY_ENVIRONMENT }}.txt"
          fi
          
